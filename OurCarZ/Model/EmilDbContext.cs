// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace OurCarZ.Model
{
    public partial class EmilDbContext : DbContext
    {
        public EmilDbContext()
        {
        }

        public EmilDbContext(DbContextOptions<EmilDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Car> Cars { get; set; }
        public virtual DbSet<Institution> Institutions { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserRoute> UserRoutes { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=emilzealanddb.database.windows.net;Initial Catalog=emil-db;User ID=emiladmin;Password=Sql12345");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Car>(entity =>
            {
                entity.Property(e => e.Model).IsUnicode(false);

                entity.Property(e => e.Seats).IsUnicode(false);

                entity.Property(e => e.Year).IsUnicode(false);
            });

            modelBuilder.Entity<Institution>(entity =>
            {
                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Zipcode).IsUnicode(false);
            });

            modelBuilder.Entity<Route>(entity =>
            {
                entity.Property(e => e.FinishPoint).IsUnicode(false);

                entity.Property(e => e.StartPoint).IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Routes)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Route_ToUser");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.PhoneNumber).IsUnicode(false);

                entity.HasOne(d => d.Car)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.CarId)
                    .HasConstraintName("FK_User_ToCar");
            });

            modelBuilder.Entity<UserRoute>(entity =>
            {
                entity.Property(e => e.UserRouteId).ValueGeneratedNever();

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.UserRoutes)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_UserRoute_ToRoute");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoutes)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_UserRoute_ToUser");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}