// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

#nullable disable

namespace OurCarZ.Model
{
    [Table("User")]
    public partial class User
    {
        public User()
        {
            Routes = new HashSet<Route>();
            UserRoutes = new HashSet<UserRoute>();
        }

        [Key]
        [Column("UserID")]
        public int UserId { get; set; }
        [StringLength(8), MinLength(8, ErrorMessage = "Your phonenumber should be 8 digits"), MaxLength(8, ErrorMessage ="Your phonenumber should be 8 digits"), Required(ErrorMessage ="Your phonenumber is required"), Phone]
        public string PhoneNumber { get; set; }
        [StringLength(50), Required(ErrorMessage ="First name is required")]
        public string FirstName { get; set; }
        [StringLength(50), Required(ErrorMessage ="Last name is required")]
        public string LastName { get; set; }
        [Column("CarID")]
        public int? CarId { get; set; }
        [StringLength(5), MinLength(0), MaxLength(5)]
        public double? Rating { get; set; }
        [StringLength(28), MinLength(8, ErrorMessage ="Your password is too short"), MaxLength(28, ErrorMessage ="Your password is too long"), RegularExpression(@"(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,28})$",
         ErrorMessage = "Password must contain one uppercase, one lowercase, one number, and be atleast 8 characters long"), Required]
        public string? Password { get; set; }
        [StringLength(28),MinLength(8, ErrorMessage ="Your password is too short"), MaxLength(28, ErrorMessage ="Your password is too long"), Required, Compare(nameof(Password), ErrorMessage ="The passwords does not match")]
        public string? ConfirmPassword { get; set; }
        [MinLength(6), MaxLength(30), Required, RegularExpression(@"^[a-zA-Z0-9_.+-]+@(edu.easj.dk)+$", ErrorMessage ="Invalid email format, use school mails")]
        public string? Email { get; set; }

        [ForeignKey(nameof(CarId))]
        [InverseProperty("Users")]
        public virtual Car Car { get; set; }
        [InverseProperty(nameof(Route.User))]
        public virtual ICollection<Route> Routes { get; set; }
        [InverseProperty(nameof(UserRoute.User))]
        public virtual ICollection<UserRoute> UserRoutes { get; set; }
    }
}